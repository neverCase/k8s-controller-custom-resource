/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.nevercase.k8s_controller_custom_resource.api.proto;

// Package-wide variables from generator "generated".
option go_package = "proto";

message ConfigMap {
  optional string Name = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;
}

message ConfigMapList {
  repeated ConfigMap items = 1;
}

message MysqlCrd {
  optional string Name = 1;

  optional NodeSpec master = 2;

  optional NodeSpec slave = 3;
}

message MysqlCrdList {
  repeated MysqlCrd items = 1;
}

message NameSpace {
  optional string Name = 1;
}

message NameSpaceList {
  repeated NameSpace items = 1;
}

message NodeSpec {
  optional string Name = 1;

  optional int32 replicas = 2;

  optional string image = 3;

  optional string imagePullSecrets = 4;

  // The path of the nas disk which was mounted on the machine
  optional string volumePath = 5;
}

message Param {
  optional string service = 1;

  optional string resourceType = 2;

  optional string nameSpace = 3;
}

message RedisCrd {
  optional string Name = 1;

  optional NodeSpec master = 2;

  optional NodeSpec slave = 3;
}

message RedisCrdList {
  repeated RedisCrd items = 1;
}

message Request {
  optional Param param = 1;

  optional bytes data = 2;
}

message ResourceList {
  repeated string items = 1;
}

message Response {
  optional int32 code = 1;

  optional Param param = 2;

  optional bytes result = 3;
}

